version: 2

jobs:
  build:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Setup dependencies
          command: |
            set -euo pipefail

            apk add --no-progress --no-cache cpio curl git gzip jq tar
            curl -LsS --fail https://github.com/tcnksm/ghr/releases/download/v0.12.2/ghr_v0.12.2_linux_amd64.tar.gz \
                | tar xz --strip-components=1 -C /usr/bin --wildcards "*/ghr"
      - run:
          name: Build Fedora CoreOS PXE images if necessary
          command: |
            set -euo pipefail

            function is_release_blacklisted() {
                if [[ "$1" == "31.20200505.2.0" ]]; then
                    return 0
                fi
                return 1
            }

            function skipcpio() {
              cpio -t 2>&1 >/dev/null | (grep -vE '^[0-9]+ blocks?$' >&2 || true)
              cat
            }

            BRANCHES="stable testing"
            for BRANCH in ${BRANCHES}; do
              # Only build the latest 10 releases
              BUILD_IDS=$(curl -sS --fail "https://builds.coreos.fedoraproject.org/prod/streams/${BRANCH}/builds/builds.json" | jq -r '.builds[].id' | head -n 10)

              for BUILD_ID in ${BUILD_IDS}; do
                if is_release_blacklisted "${BUILD_ID}"; then
                  echo "Skipping blacklisted release ${BUILD_ID}" >&2
                  continue
                fi

                OUTPUT_NAME_PREFIX="fedora-coreos-${BUILD_ID}-installer-"
                INPUT_NAME_PREFIX="fedora-coreos-${BUILD_ID}-live-"

                # Kernel
                KERNEL_SUFFIX="kernel-x86_64"
                RELEASE_HTTPCODE=$(curl -sSo /dev/null --write-out %{http_code} "https://github.com/SerialVelocity/coreos-pxe-images/releases/download/${BRANCH}/${OUTPUT_NAME_PREFIX}${KERNEL_SUFFIX}")
                if [[ "${RELEASE_HTTPCODE}" -ne 302 ]]; then
                  echo "Downloading ${INPUT_NAME_PREFIX}${KERNEL_SUFFIX}..." >&2
                  curl -LsS --fail -o "${OUTPUT_NAME_PREFIX}${KERNEL_SUFFIX}" "https://builds.coreos.fedoraproject.org/prod/streams/${BRANCH}/builds/${BUILD_ID}/x86_64/${INPUT_NAME_PREFIX}${KERNEL_SUFFIX}"
                  ghr "${BRANCH}" "${OUTPUT_NAME_PREFIX}${KERNEL_SUFFIX}"
                fi

                # Initramfs and squashfs
                INITRAMFS_SUFFIX="initramfs.x86_64.img"
                ROOTFS_SUFFIX="rootfs.x86_64.img"
                RELEASE_HTTPCODE=$(curl -sSo /dev/null --write-out %{http_code} "https://github.com/SerialVelocity/coreos-pxe-images/releases/download/${BRANCH}/${OUTPUT_NAME_PREFIX}${ROOTFS_SUFFIX}")
                if [[ "${RELEASE_HTTPCODE}" -ne 302 ]]; then
                  echo "Downloading ${INPUT_NAME_PREFIX}${INITRAMFS_SUFFIX}..." >&2
                  curl -LsS --fail -o "${INPUT_NAME_PREFIX}${INITRAMFS_SUFFIX}" "https://builds.coreos.fedoraproject.org/prod/streams/${BRANCH}/builds/${BUILD_ID}/x86_64/${INPUT_NAME_PREFIX}${INITRAMFS_SUFFIX}"

                  echo "Finding offsets..." >&2
                  FULL_SIZE=$(stat -c '%s' "${INPUT_NAME_PREFIX}${INITRAMFS_SUFFIX}")
                  GZIP_COMPRESSED_SIZE=$(cat "${INPUT_NAME_PREFIX}${INITRAMFS_SUFFIX}" | skipcpio | wc -c)
                  MICROCODE_SIZE=$((${FULL_SIZE} - ${GZIP_COMPRESSED_SIZE}))

                  cat "${INPUT_NAME_PREFIX}${INITRAMFS_SUFFIX}" | skipcpio | gzip -dc > uncompressed.img
                  GZIP_UNCOMPRESSED_SIZE=$(stat -c '%s' uncompressed.img)

                  ROOTFS_SIZE=${GZIP_UNCOMPRESSED_SIZE}
                  while true; do
                      REMAINING_SIZE=$(tail -c "${ROOTFS_SIZE}" uncompressed.img | skipcpio | wc -c)
                      if [[ "${REMAINING_SIZE}" -eq 0 ]]; then
                          break
                      fi
                      ROOTFS_SIZE=${REMAINING_SIZE}
                  done
                  FILES=$(tail -c "${ROOTFS_SIZE}" uncompressed.img | cpio -t)
                  if [[ "${FILES}" != *"root.squashfs"* ]]; then
                      echo "Failed to find the root.squashfs" >&2
                      exit 1
                  fi
                  INITRAMFS_SIZE=$((${GZIP_UNCOMPRESSED_SIZE} - ${ROOTFS_SIZE}))

                  echo "Creating artefacts..." >&2
                  set +o pipefail

                  echo "Preparing ${OUTPUT_NAME_PREFIX}${INITRAMFS_SUFFIX}..." >&2
                  head -c "${MICROCODE_SIZE}" "${INPUT_NAME_PREFIX}${INITRAMFS_SUFFIX}" > "${OUTPUT_NAME_PREFIX}${INITRAMFS_SUFFIX}"
                  head -c "${INITRAMFS_SIZE}" uncompressed.img | gzip -c9 >> "${OUTPUT_NAME_PREFIX}${INITRAMFS_SUFFIX}"

                  echo "Preparing ${OUTPUT_NAME_PREFIX}${ROOTFS_SUFFIX}..." >&2
                  tail -c "${ROOTFS_SIZE}" uncompressed.img | cpio -iv --to-stdout "root.squashfs" > "${OUTPUT_NAME_PREFIX}${ROOTFS_SUFFIX}"

                  set -o pipefail

                  if [[ "$(stat -c '%s' "${OUTPUT_NAME_PREFIX}${INITRAMFS_SUFFIX}")" -eq 0 ]] || [[ "$(stat -c '%s' "${OUTPUT_NAME_PREFIX}${ROOTFS_SUFFIX}")" -eq 0 ]]; then
                      echo "Failed to generate files" >&2
                      exit 1
                  fi

                  ghr "${BRANCH}" "${OUTPUT_NAME_PREFIX}${INITRAMFS_SUFFIX}"
                  ghr "${BRANCH}" "${OUTPUT_NAME_PREFIX}${ROOTFS_SUFFIX}"

                  rm uncompressed.img
                  rm "${INPUT_NAME_PREFIX}${INITRAMFS_SUFFIX}"
                  rm "${OUTPUT_NAME_PREFIX}${INITRAMFS_SUFFIX}"
                  rm "${OUTPUT_NAME_PREFIX}${ROOTFS_SUFFIX}"
                fi
              done
            done
workflows:
  version: 2
  build:
    jobs:
      - build:
          filters:
            branches:
              only:
                - master
  nightly:
    jobs:
      - build
    triggers:
      - schedule:
          cron: "0 2 * * *"
          filters:
            branches:
              only:
                master
